<!DOCTYPE html>
<html>
<head>
    <title>OEE Application with Production Planning</title>
    <style>
        /* Base Styles */
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            color: #333;
        }

        /* Header Styles */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #333;
            padding: 10px 20px;
            box-sizing: border-box;
            color: white;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .header .logo {
            height: 40px;
        }

        .header nav {
            display: flex;
            gap: 10px;
        }

        .header nav button {
            background: none;
            border: none;
            color: #32c800;
            font-size: 16px;
            cursor: pointer;
            padding: 8px 15px;
            border: 1px solid #32c800;
            border-radius: 5px;
            transition: background 0.3s ease;
        }

        .header nav button:hover {
            background-color: rgba(50, 200, 0, 0.1);
        }

        /* Content Styles */
        .content {
            margin-top: 70px;
            padding: 20px;
        }

        /* Page Styles */
        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        .page h2 {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: left;
        }

        label {
            display: block;
            margin-top: 10px;
            text-align: left;
        }

        input[type="number"],
        input[type="text"],
        input[type="date"],
        input[type="datetime-local"],
        select {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            box-sizing: border-box;
            border: 1px solid #ccc;
        }

        button {
            padding: 10px 15px;
            margin-top: 15px;
            background-color: #32c800;
            color: #fff;
            border: none;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        button:hover {
            background-color: #28b200;
        }

        /* Container Styles */
        .container {
            max-width: 1200px;
            margin: auto;
        }

        /* Master Data Styles */
        .master-data-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: flex-start;
        }

        .master-data-variable {
            flex: 1 1 300px;
            margin: 10px;
            border: 1px solid #ccc;
            padding: 10px;
            box-sizing: border-box;
        }

        .master-data-variable h3 {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .master-data-variable ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .master-data-variable li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 5px;
        }

        .master-data-variable li button {
            background: none;
            border: none;
            color: red;
            cursor: pointer;
        }

        /* Status Indicators */
        .status-indicator {
            width: 20px;
            height: 20px;
            display: inline-block;
            margin-right: 5px;
            font-size: 20px;
        }

        /* Production Orders List */
        .production-orders-list ul {
            list-style-type: none;
            padding: 0;
        }

        .production-orders-list li {
            background-color: #e9e9e9;
            padding: 10px;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .production-orders-list li:hover {
            background-color: #d9d9d9;
        }

        /* Input File Styles */
        input[type="file"] {
            display: none;
        }

        /* Align Left */
        .align-left {
            text-align: left;
        }

        /* Downtime and Quality Sections */
        #downtime-section, #quality-section {
            padding: 20px;
            background-color: #f2f2f2;
            border: 1px solid #ccc;
            margin-top: 20px;
        }

        /* Filters */
        .filters {
            margin-bottom: 20px;
            text-align: left;
        }

        /* Calendar View */
        .calendar-view {
            margin-top: 20px;
        }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        table th, table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        table th {
            background-color: #f2f2f2;
        }

        /* Buttons in Lists */
        .list-button {
            background: none;
            border: none;
            color: #32c800;
            cursor: pointer;
            padding: 0;
        }

        .list-button:hover {
            text-decoration: underline;
        }

        /* Modal Styles */
        #addModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1001;
            background-color: rgba(0, 0, 0, 0.5);
        }

        #addModalContent {
            background-color: #fff;
            padding: 20px;
            margin: 50px auto;
            width: 400px;
            position: relative;
        }

        #addModalContent h3 {
            margin-top: 0;
        }

        #addModalContent button {
            margin-top: 10px;
        }

        /* Status Button Styles */
        .status-button {
            padding: 10px 15px;
            border: none;
            color: #fff;
            font-weight: bold;
            cursor: default;
        }

        .status-running {
            background-color: #f1c40f; /* Yellow */
        }

        .status-hold {
            background-color: #e74c3c; /* Red */
        }

        .status-completed {
            background-color: #2ecc71; /* Green */
        }

        /* Additional Styles for Finished POs */
        .finished-productions-list {
            margin-top: 30px;
        }

        /* Calendar View Styles */
        .calendar-view {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .calendar-view .calendar-item {
            flex: 1 1 calc(33.333% - 20px);
            background-color: #fff;
            padding: 15px;
            box-sizing: border-box;
            margin: 10px;
            border: 1px solid #ccc;
        }

        /* DateTime Picker */
        input[type="datetime-local"] {
            width: auto;
        }

        /* Chart Container */
        #chartContainer {
            position: relative;
            width: 100%;
            max-width: 800px;
            margin: auto;
        }

        /* Status Icons */
        .status-icon {
            font-size: 20px;
            margin-right: 5px;
        }

        .status-icon.completed {
            color: #2ecc71; /* Green */
        }

        .status-icon.running {
            color: #f1c40f; /* Yellow */
        }

        .status-icon.hold {
            color: #e74c3c; /* Red */
        }
    </style>
    <!-- Include Chart.js library for charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <!-- Include PapaParse library for CSV parsing -->
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.2/papaparse.min.js"></script>
</head>
<body>

    <!-- Header -->
    <div class="header">
        <!-- Company Logo -->
        <img class="logo" src="https://raw.githubusercontent.com/justashish1/logo/main/logo.png" alt="Company Logo" />

        <!-- Navigation -->
        <nav>
            <button onclick="showPage('production-page');">Production</button>
            <button onclick="showPage('production-planning-page');">Production Planning</button>
            <button onclick="showPage('data-visualization-page');">Data Visualization</button>
            <button onclick="showPage('master-data-page');">Master Data</button>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="content">
        <!-- Production Page -->
        <div id="production-page" class="page active">
            <h2>Production</h2>
            <div class="container">
                <!-- Production Orders to Start -->
                <div id="production-orders-to-start" class="production-orders-list">
                    <h3>Production Orders to Start</h3>
                    <ul id="productionOrdersUl">
                        <!-- Production orders will be listed here -->
                    </ul>
                </div>

                <!-- Active Productions List -->
                <div class="active-productions-list" id="active-productions-list">
                    <h3>Active Productions</h3>
                    <ul id="activeProductionsUl">
                        <!-- Active productions will be listed here -->
                    </ul>
                </div>

                <!-- Finished Productions List -->
                <div class="finished-productions-list" id="finished-productions-list">
                    <h3>Finished Productions</h3>
                    <input type="text" id="finishedProductionsFilter" placeholder="Search..." oninput="updateFinishedProductionsList()">
                    <ul id="finishedProductionsUl">
                        <!-- Finished productions will be listed here -->
                    </ul>
                </div>

                <!-- Active Production Section -->
                <div id="active-production-section" style="display: none;">
                    <!-- Main Active Production Content -->
                    <div id="main-active-production-content">
                        <!-- Back Button -->
                        <button onclick="returnToProductionList()">Back</button>

                        <!-- Production Info -->
                        <div class="production-info align-left">
                            <p><strong>Workcenter:</strong> <span id="activeWorkcenter"></span></p>
                            <p><strong>Production Order ID:</strong> <span id="activeProductionOrder"></span></p>
                            <p><strong>Product ID:</strong> <span id="activeProductID"></span></p>
                            <p><strong>Operator Name:</strong> <span id="activeOperatorName"></span></p>
                            <p><strong>Shift:</strong> <span id="activeShift"></span></p>
                            <p><strong>Planned Start Time:</strong> <span id="activePlannedStartTime"></span></p>
                            <p><strong>Planned End Time:</strong> <span id="activePlannedEndTime"></span></p>
                        </div>
                        <div class="production-timer">
                            <p><strong>Actual Running Time:</strong> <span id="runningTime">00:00:00</span></p>
                        </div>
                        <!-- Control Buttons -->
                        <button onclick="stopProduction()">Complete Production</button>
                        <button onclick="startDowntime()">Start Downtime</button>
                        <button onclick="recordQualityIssue()">Record Quality Issue</button>

                        <!-- Status Indicator -->
                        <div>
                            <button id="statusButton" class="status-button status-running">Production Running</button>
                        </div>
                    </div>

                    <!-- Downtime Section -->
                    <div id="downtime-section" style="display: none;">
                        <h3>Downtime Recording</h3>
                        <label for="downtimeCategorySelect">Downtime Category:</label>
                        <select id="downtimeCategorySelect" onchange="populateDowntimeCodes()">
                            <!-- Populated dynamically -->
                        </select>

                        <label for="downtimeCodeSelect">Downtime Code:</label>
                        <select id="downtimeCodeSelect">
                            <!-- Populated dynamically -->
                        </select>

                        <button onclick="endDowntime()">End Downtime</button>
                        <button onclick="cancelDowntime()">Cancel Downtime</button>
                    </div>

                    <!-- Quality Issue Section -->
                    <div id="quality-section" style="display: none;">
                        <h3>Quality Issue Recording</h3>
                        <label for="qualityIssueCategorySelect">Quality Issue Category:</label>
                        <select id="qualityIssueCategorySelect">
                            <!-- Populated dynamically -->
                        </select>

                        <label for="qualityIssueDescription">Quality Issue Description:</label>
                        <input type="text" id="qualityIssueDescription">

                        <button onclick="resolveQualityIssue()">Resolve Issue</button>
                        <button onclick="cancelQualityIssue()">Cancel</button>
                    </div>

                    <!-- Downtime Log -->
                    <div class="downtime-log" id="downtimeLogSection" style="display: none;">
                        <h3>Downtime Log</h3>
                        <table id="downtimeLogTable">
                            <thead>
                                <tr>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Duration</th>
                                    <th>Category</th>
                                    <th>Code</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Downtime records will appear here -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Quality Log -->
                    <div class="quality-log" id="qualityLogSection" style="display: none;">
                        <h3>Quality Issue Log</h3>
                        <table id="qualityLogTable">
                            <thead>
                                <tr>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Duration</th>
                                    <th>Category</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Quality issue records will appear here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Production Planning Page -->
        <div id="production-planning-page" class="page">
            <h2>Production Planning</h2>
            <div class="container">
                <!-- Upload Production Orders -->
                <input type="file" id="productionOrderFile" accept=".csv" onchange="uploadProductionOrders()">
                <button onclick="document.getElementById('productionOrderFile').click()">Upload Production Orders</button>
                <button onclick="exportProductionOrders()">Export Production Orders</button>

                <!-- Create Production Order -->
                <div id="create-production-order-section">
                    <label for="planWorkcenter">Workcenter:</label>
                    <select id="planWorkcenter">
                        <!-- Options will be populated from master data -->
                    </select>

                    <label for="planProductionOrder">Production Order ID:</label>
                    <div style="display: flex;">
                        <input type="text" id="planProductionOrder" style="flex: 1;">
                        <button onclick="generateProductionOrderID()" style="margin-left: 5px;">+</button>
                    </div>

                    <label for="planProductID">Product ID:</label>
                    <select id="planProductID" onchange="setIdealCycleTime()">
                        <!-- Options will be populated from master data -->
                    </select>

                    <label for="planShop">Shop:</label>
                    <select id="planShop">
                        <!-- Options will be populated from master data -->
                    </select>

                    <label for="planShift">Shift:</label>
                    <select id="planShift" onchange="calculateAvailableTime()">
                        <!-- Options will be populated from master data -->
                    </select>

                    <label for="planOperatorName">Operator Name:</label>
                    <select id="planOperatorName">
                        <!-- Options will be populated from master data -->
                    </select>

                    <label for="planPlannedQty">Planned Production Quantity:</label>
                    <input type="number" id="planPlannedQty" min="1">

                    <label for="planIdealCycleTime">Ideal Cycle Time (minutes per unit):</label>
                    <input type="number" id="planIdealCycleTime" min="0" step="any">

                    <label for="planTotalRequiredTime">Total Time Required (minutes):</label>
                    <input type="number" id="planTotalRequiredTime" readonly>

                    <label for="planAvailableTime">Available Time (minutes):</label>
                    <input type="number" id="planAvailableTime" readonly>

                    <label for="planStartTime">Planned Start Time:</label>
                    <input type="datetime-local" id="planStartTime" onchange="calculatePlannedEndTime()">

                    <label for="planEndTime">Planned End Time:</label>
                    <input type="datetime-local" id="planEndTime">

                    <!-- Schedule Planned Downtime -->
                    <h3>Schedule Planned Downtime</h3>
                    <label for="plannedDowntimeCategory">Downtime Category:</label>
                    <select id="plannedDowntimeCategory">
                        <!-- Options will be populated from master data -->
                    </select>

                    <label for="plannedDowntimeStart">Downtime Start Time:</label>
                    <input type="datetime-local" id="plannedDowntimeStart">

                    <label for="plannedDowntimeDuration">Downtime Duration (minutes):</label>
                    <input type="number" id="plannedDowntimeDuration" min="0">

                    <button onclick="addPlannedDowntime()">Add Planned Downtime</button>

                    <!-- Planned Downtimes List -->
                    <ul id="plannedDowntimesList">
                        <!-- Planned downtimes will be listed here -->
                    </ul>

                    <button onclick="createProductionOrder()">Create Production Order</button>
                </div>

                <!-- Filters -->
                <div class="filters">
                    <label for="planningFilter">Filter Production Orders:</label>
                    <input type="text" id="planningFilter" oninput="updatePlannedProductionsList()" placeholder="Search...">
                </div>

                <!-- Planned Production Orders List -->
                <div class="production-orders-list" id="planned-productions-list">
                    <h3>Planned Production Orders</h3>
                    <ul id="plannedProductionsUl">
                        <!-- Planned productions will be listed here -->
                    </ul>
                </div>

                <!-- Active Productions List -->
                <div class="active-productions-list" id="planning-active-productions-list">
                    <h3>Active Productions</h3>
                    <ul id="planningActiveProductionsUl">
                        <!-- Active productions will be listed here -->
                    </ul>
                </div>
            </div>
        </div>

        <!-- Data Visualization Page -->
        <div id="data-visualization-page" class="page">
            <h2>Data Visualization</h2>
            <div class="container">
                <!-- Filters -->
                <div class="filters">
                    <label for="filterStartDateTime">Start Date and Time:</label>
                    <input type="datetime-local" id="filterStartDateTime" onchange="updateVisualization()">

                    <label for="filterEndDateTime">End Date and Time:</label>
                    <input type="datetime-local" id="filterEndDateTime" onchange="updateVisualization()">

                    <label for="filterVariable">Select Variable:</label>
                    <select id="filterVariable" onchange="updateFilterOptions()">
                        <option value="">--Select Variable--</option>
                        <option value="productID">Product ID</option>
                        <option value="productionOrder">Production Order</option>
                        <option value="workcenter">Workcenter</option>
                        <option value="shift">Shift</option>
                    </select>

                    <label for="filterValue">Select Value:</label>
                    <select id="filterValue" onchange="updateVisualization()">
                        <!-- Populated dynamically -->
                    </select>

                    <label for="timeGrouping">Time Grouping:</label>
                    <select id="timeGrouping" onchange="updateVisualization()">
                        <option value="day">Day</option>
                        <option value="week">Week</option>
                        <option value="month">Month</option>
                    </select>
                </div>

                <!-- OEE Chart -->
                <div id="chartContainer">
                    <canvas id="oeeChartCanvas"></canvas>
                </div>

                <!-- Downtime and Quality Issue Lists -->
                <div class="calendar-view">
                    <h3>Downtime Events</h3>
                    <input type="datetime-local" id="downtimeStartDateTime" onchange="displayDowntimeEvents()">
                    <input type="datetime-local" id="downtimeEndDateTime" onchange="displayDowntimeEvents()">
                    <table id="downtimeEventsTable">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Workcenter</th>
                                <th>Production Order</th>
                                <th>Category</th>
                                <th>Code</th>
                                <th>Duration</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Downtime events will be listed here -->
                        </tbody>
                    </table>

                    <h3>Quality Issues</h3>
                    <input type="datetime-local" id="qualityStartDateTime" onchange="displayQualityIssues()">
                    <input type="datetime-local" id="qualityEndDateTime" onchange="displayQualityIssues()">
                    <table id="qualityIssuesTable">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Workcenter</th>
                                <th>Production Order</th>
                                <th>Category</th>
                                <th>Description</th>
                                <th>Duration</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Quality issues will be listed here -->
                        </tbody>
                    </table>
                </div>

                <!-- Export Button -->
                <button onclick="exportOEEData()">Export OEE Data</button>
            </div>
        </div>

        <!-- Master Data Page -->
        <div id="master-data-page" class="page">
            <h2>Master Data</h2>
            <div class="container">
                <!-- Import/Export Buttons -->
                <input type="file" id="importMasterDataFile" accept=".csv" onchange="importMasterData()">
                <button onclick="exportMasterData()">Export Master Data</button>
                <button onclick="document.getElementById('importMasterDataFile').click()">Import Master Data</button>

                <!-- Master Data Variables -->
                <div class="master-data-container">
                    <!-- Product IDs -->
                    <div class="master-data-variable">
                        <h3>Product IDs <button onclick="showAddModal('productIDs')">+</button></h3>
                        <ul id="productIDList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Shops -->
                    <div class="master-data-variable">
                        <h3>Shops <button onclick="showAddModal('shops')">+</button></h3>
                        <ul id="shopList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Workcenters -->
                    <div class="master-data-variable">
                        <h3>Workcenters <button onclick="showAddModal('workcenters')">+</button></h3>
                        <ul id="workcenterList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Shifts -->
                    <div class="master-data-variable">
                        <h3>Shifts <button onclick="showAddModal('shifts')">+</button></h3>
                        <ul id="shiftList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Operator Names -->
                    <div class="master-data-variable">
                        <h3>Operator Names <button onclick="showAddModal('operatorNames')">+</button></h3>
                        <ul id="operatorNameList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Downtime Categories -->
                    <div class="master-data-variable">
                        <h3>Downtime Categories <button onclick="showAddModal('downtimeCategories')">+</button></h3>
                        <ul id="downtimeCategoryList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Downtime Codes -->
                    <div class="master-data-variable">
                        <h3>Downtime Codes <button onclick="showAddModal('downtimeCodes')">+</button></h3>
                        <ul id="downtimeCodeList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Quality Issue Categories -->
                    <div class="master-data-variable">
                        <h3>Quality Issue Categories <button onclick="showAddModal('qualityIssueCategories')">+</button></h3>
                        <ul id="qualityIssueCategoryList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>

                    <!-- Ideal Cycle Time per Product ID -->
                    <div class="master-data-variable">
                        <h3>Ideal Cycle Times <button onclick="showAddModal('idealCycleTimes')">+</button></h3>
                        <ul id="idealCycleTimeList">
                            <!-- Entries will be listed here -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Modal -->
        <div id="addModal">
            <div id="addModalContent">
                <h3 id="addModalTitle">Add Item</h3>
                <div id="addModalBody">
                    <!-- Dynamic content -->
                </div>
                <button onclick="saveMasterData()">Save</button>
                <button onclick="closeAddModal()">Cancel</button>
            </div>
        </div>

    </div>


    <!-- JavaScript Code -->
    <script>
    // The entire JavaScript code provided above goes here
      // JavaScript Code
        // Variables for timing and productions
        var productionTimers = {}; // Timers for each active production
        var activeProductions = []; // Array to hold multiple active productions
        var plannedProductions = []; // Array to hold planned productions
        var finishedProductions = []; // Array to hold finished productions

        // Current selected production (for UI interaction)
        var currentProductionIndex = null;

        // Variable to hold current master data key for modal
        var currentMasterDataKey = '';

        // Function to switch between pages
        function showPage(pageId) {
            // Hide all pages
            document.querySelectorAll('.page').forEach(function(page) {
                page.classList.remove('active');
            });
            // Show the selected page
            document.getElementById(pageId).classList.add('active');

            // Update content based on the page
            if (pageId === 'production-page') {
                updateProductionOrdersList();
                updateActiveProductionsList();
                updateFinishedProductionsList();
            } else if (pageId === 'production-planning-page') {
                populatePlanningDropdowns();
                updatePlannedProductionsList();
                updatePlanningActiveProductionsList();
            } else if (pageId === 'data-visualization-page') {
                populateVisualizationFilters();
                updateVisualization();
            } else if (pageId === 'master-data-page') {
                displayMasterData();
            }
        }

        // Function to populate dropdowns in Production Planning
        function populatePlanningDropdowns() {
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};

            // Populate dropdowns with master data
            populateDropdown('planProductID', masterData['productIDs']);
            populateDropdown('planShop', masterData['shops']);
            populateDropdown('planWorkcenter', masterData['workcenters']);
            populateDropdown('planShift', masterData['shifts']);
            populateDropdown('planOperatorName', masterData['operatorNames']);
            populateDropdown('plannedDowntimeCategory', masterData['downtimeCategories']);
        }

        // Function to populate a dropdown
        function populateDropdown(elementId, dataArray) {
            var selectElement = document.getElementById(elementId);
            selectElement.innerHTML = '<option value="">Select</option>';
            (dataArray || []).forEach(function(item) {
                var option = document.createElement('option');
                if (typeof item === 'object') {
                    option.value = JSON.stringify(item);
                    option.textContent = item.name + ' (' + item.startTime + ' - ' + item.endTime + ')';
                } else {
                    option.value = item;
                    option.textContent = item;
                }
                selectElement.appendChild(option);
            });
        }

        // Function to set Ideal Cycle Time based on Product ID
        function setIdealCycleTime() {
            var productID = document.getElementById('planProductID').value;
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
            var idealCycleTimes = masterData['idealCycleTimes'] || {};
            var idealCycleTime = idealCycleTimes[productID] || 0;
            document.getElementById('planIdealCycleTime').value = idealCycleTime;

            // Calculate total required time
            calculateTotalRequiredTime();
        }

        // Function to calculate total required time
        function calculateTotalRequiredTime() {
            var plannedQty = parseFloat(document.getElementById('planPlannedQty').value) || 0;
            var idealCycleTime = parseFloat(document.getElementById('planIdealCycleTime').value) || 0;
            var totalTime = plannedQty * idealCycleTime;
            document.getElementById('planTotalRequiredTime').value = totalTime.toFixed(2);

            // Calculate available time
            calculateAvailableTime();
        }

        // Function to calculate available time
        function calculateAvailableTime() {
            var shiftValue = document.getElementById('planShift').value;
            if (!shiftValue) {
                document.getElementById('planAvailableTime').value = '';
                return;
            }
            var shift = JSON.parse(shiftValue);
            var shiftStart = parseTime(shift.startTime);
            var shiftEnd = parseTime(shift.endTime);
            var shiftDuration = (shiftEnd - shiftStart) / 60000; // in minutes

            // Subtract breaks and planned downtimes
            var totalBreaks = (shift.lunchDuration || 0) + (shift.tpmDuration || 0) + (shift.teaDuration || 0);
            var plannedDowntimes = calculatePlannedDowntimesDuration();
            var availableTime = shiftDuration - totalBreaks - plannedDowntimes;

            document.getElementById('planAvailableTime').value = availableTime.toFixed(2);

            // Check if available time is sufficient
            var totalRequiredTime = parseFloat(document.getElementById('planTotalRequiredTime').value) || 0;
            if (availableTime < totalRequiredTime) {
                var feasibleQty = Math.floor(availableTime / parseFloat(document.getElementById('planIdealCycleTime').value));
                alert('Available time is not sufficient to produce the planned quantity. Feasible production quantity is: ' + feasibleQty);
            }
        }

        // Function to parse time in HH:MM format
        function parseTime(timeString) {
            var parts = timeString.split(':');
            var date = new Date();
            date.setHours(parseInt(parts[0]));
            date.setMinutes(parseInt(parts[1]));
            date.setSeconds(0);
            date.setMilliseconds(0);
            return date;
        }

        // Function to calculate planned downtimes duration
        function calculatePlannedDowntimesDuration() {
            var totalDuration = 0;
            var downtimes = plannedDowntimes || [];
            downtimes.forEach(function(downtime) {
                totalDuration += downtime.duration;
            });
            return totalDuration;
        }

        // Variables to hold planned downtimes
        var plannedDowntimes = [];

        // Function to add planned downtime
        function addPlannedDowntime() {
            var category = document.getElementById('plannedDowntimeCategory').value;
            var startTime = document.getElementById('plannedDowntimeStart').value;
            var duration = parseFloat(document.getElementById('plannedDowntimeDuration').value) || 0;

            if (!category || !startTime || !duration) {
                alert('Please fill out all planned downtime fields.');
                return;
            }

            plannedDowntimes.push({
                category: category,
                startTime: startTime,
                duration: duration
            });

            updatePlannedDowntimesList();
            calculateAvailableTime();
        }

        // Function to update planned downtimes list
        function updatePlannedDowntimesList() {
            var list = document.getElementById('plannedDowntimesList');
            list.innerHTML = '';
            plannedDowntimes.forEach(function(downtime, index) {
                var li = document.createElement('li');
                li.textContent = 'Category: ' + downtime.category + ', Start Time: ' + downtime.startTime + ', Duration: ' + downtime.duration + ' mins';
                var deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.onclick = function() {
                    plannedDowntimes.splice(index, 1);
                    updatePlannedDowntimesList();
                    calculateAvailableTime();
                };
                li.appendChild(deleteButton);
                list.appendChild(li);
            });
        }

        // Function to display master data
        function displayMasterData() {
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};

            displayMasterDataList('productIDs', 'productIDList');
            displayMasterDataList('shops', 'shopList');
            displayMasterDataList('workcenters', 'workcenterList');
            displayMasterDataList('operatorNames', 'operatorNameList');
            displayMasterDataList('downtimeCategories', 'downtimeCategoryList');
            displayMasterDataList('downtimeCodes', 'downtimeCodeList');
            displayMasterDataList('qualityIssueCategories', 'qualityIssueCategoryList');

            // Display Shifts with details
            var shiftList = document.getElementById('shiftList');
            shiftList.innerHTML = '';
            var shifts = masterData['shifts'] || [];
            shifts.forEach(function(shift, index) {
                var li = document.createElement('li');
                li.textContent = shift.name + ' (' + shift.startTime + ' - ' + shift.endTime + ')';
                var deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.onclick = function() {
                    deleteMasterDataItem('shifts', index);
                };
                li.appendChild(deleteButton);
                shiftList.appendChild(li);
            });

            // Display Ideal Cycle Times
            var idealCycleTimeList = document.getElementById('idealCycleTimeList');
            idealCycleTimeList.innerHTML = '';
            var idealCycleTimes = masterData['idealCycleTimes'] || {};
            for (var productID in idealCycleTimes) {
                var li = document.createElement('li');
                li.textContent = productID + ': ' + idealCycleTimes[productID] + ' min/unit';
                var deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.onclick = (function(productID) {
                    return function() {
                        deleteIdealCycleTime(productID);
                    };
                })(productID);
                li.appendChild(deleteButton);
                idealCycleTimeList.appendChild(li);
            }
        }

        // Function to display master data list
        function displayMasterDataList(key, listId) {
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
            var dataArray = masterData[key] || [];
            var listElement = document.getElementById(listId);
            listElement.innerHTML = '';
            dataArray.forEach(function(item, index) {
                var li = document.createElement('li');
                li.textContent = item;
                var deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.onclick = function() {
                    deleteMasterDataItem(key, index);
                };
                li.appendChild(deleteButton);
                listElement.appendChild(li);
            });
        }

        // Function to show Add Modal
        function showAddModal(key) {
            currentMasterDataKey = key;
            var addModal = document.getElementById('addModal');
            var addModalTitle = document.getElementById('addModalTitle');
            var addModalBody = document.getElementById('addModalBody');

            addModalTitle.textContent = 'Add to ' + key;

            // Clear previous content
            addModalBody.innerHTML = '';

            if (key === 'idealCycleTimes') {
                // Input for Product ID and Ideal Cycle Time
                addModalBody.innerHTML = `
                    <label for="newProductID">Product ID:</label>
                    <input type="text" id="newProductID">
                    <label for="newIdealCycleTime">Ideal Cycle Time (min/unit):</label>
                    <input type="number" id="newIdealCycleTime" min="0" step="any">
                `;
            } else if (key === 'shifts') {
                // Inputs for Shift details
                addModalBody.innerHTML = `
                    <label for="shiftName">Shift Name:</label>
                    <input type="text" id="shiftName">
                    <label for="shiftStartTime">Start Time:</label>
                    <input type="time" id="shiftStartTime">
                    <label for="shiftEndTime">End Time:</label>
                    <input type="time" id="shiftEndTime">
                    <label for="lunchStartTime">Lunch Break Start Time:</label>
                    <input type="time" id="lunchStartTime">
                    <label for="lunchEndTime">Lunch Break End Time:</label>
                    <input type="time" id="lunchEndTime">
                    <label for="tpmStartTime">TPM Break Start Time:</label>
                    <input type="time" id="tpmStartTime">
                    <label for="tpmEndTime">TPM Break End Time:</label>
                    <input type="time" id="tpmEndTime">
                    <label for="teaStartTime">Tea Break Start Time:</label>
                    <input type="time" id="teaStartTime">
                    <label for="teaEndTime">Tea Break End Time:</label>
                    <input type="time" id="teaEndTime">
                `;
            } else {
                // Single input for other keys
                addModalBody.innerHTML = `
                    <label for="newItem">New Item:</label>
                    <input type="text" id="newItem">
                `;
            }

            addModal.style.display = 'block';
        }

        // Function to close Add Modal
        function closeAddModal() {
            var addModal = document.getElementById('addModal');
            addModal.style.display = 'none';
            currentMasterDataKey = '';
        }

        // Function to save master data
        function saveMasterData() {
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
            if (currentMasterDataKey === 'idealCycleTimes') {
                var productID = document.getElementById('newProductID').value.trim();
                var idealCycleTime = parseFloat(document.getElementById('newIdealCycleTime').value);
                if (!productID || isNaN(idealCycleTime)) {
                    alert('Please enter valid values.');
                    return;
                }
                masterData['idealCycleTimes'] = masterData['idealCycleTimes'] || {};
                masterData['idealCycleTimes'][productID] = idealCycleTime;
            } else if (currentMasterDataKey === 'shifts') {
                var shiftName = document.getElementById('shiftName').value.trim();
                var shiftStartTime = document.getElementById('shiftStartTime').value;
                var shiftEndTime = document.getElementById('shiftEndTime').value;
                var lunchStartTime = document.getElementById('lunchStartTime').value;
                var lunchEndTime = document.getElementById('lunchEndTime').value;
                var tpmStartTime = document.getElementById('tpmStartTime').value;
                var tpmEndTime = document.getElementById('tpmEndTime').value;
                var teaStartTime = document.getElementById('teaStartTime').value;
                var teaEndTime = document.getElementById('teaEndTime').value;

                if (!shiftName || !shiftStartTime || !shiftEndTime) {
                    alert('Please enter valid shift details.');
                    return;
                }

                var shiftObj = {
                    name: shiftName,
                    startTime: shiftStartTime,
                    endTime: shiftEndTime,
                    lunchStartTime: lunchStartTime,
                    lunchEndTime: lunchEndTime,
                    tpmStartTime: tpmStartTime,
                    tpmEndTime: tpmEndTime,
                    teaStartTime: teaStartTime,
                    teaEndTime: teaEndTime
                };

                masterData['shifts'] = masterData['shifts'] || [];
                masterData['shifts'].push(shiftObj);
            } else {
                var newItem = document.getElementById('newItem').value.trim();
                if (!newItem) {
                    alert('Please enter a value.');
                    return;
                }
                masterData[currentMasterDataKey] = masterData[currentMasterDataKey] || [];
                if (!masterData[currentMasterDataKey].includes(newItem)) {
                    masterData[currentMasterDataKey].push(newItem);
                } else {
                    alert('Item already exists.');
                    return;
                }
            }
            localStorage.setItem('masterData', JSON.stringify(masterData));
            closeAddModal();
            displayMasterData();
        }

        // Function to delete master data item
        function deleteMasterDataItem(key, index) {
            if (confirm('Are you sure you want to delete this item?')) {
                var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
                masterData[key].splice(index, 1);
                localStorage.setItem('masterData', JSON.stringify(masterData));
                displayMasterData();
            }
        }

        // Function to delete Ideal Cycle Time
        function deleteIdealCycleTime(productID) {
            if (confirm('Are you sure you want to delete this Ideal Cycle Time?')) {
                var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
                delete masterData['idealCycleTimes'][productID];
                localStorage.setItem('masterData', JSON.stringify(masterData));
                displayMasterData();
            }
        }


        // Function to calculate planned end time
        function calculatePlannedEndTime() {
            var plannedStartTime = document.getElementById('planStartTime').value;
            var totalRequiredTime = parseFloat(document.getElementById('planTotalRequiredTime').value) || 0;

            if (plannedStartTime && totalRequiredTime) {
                var startDateTime = new Date(plannedStartTime);
                var endDateTime = new Date(startDateTime.getTime() + totalRequiredTime * 60000);
                var endDateTimeString = endDateTime.toISOString().slice(0, 16);
                document.getElementById('planEndTime').value = endDateTimeString;
            }
        }

        // Event listeners for inputs
        document.getElementById('planPlannedQty').addEventListener('input', calculateTotalRequiredTime);
        document.getElementById('planIdealCycleTime').addEventListener('input', calculateTotalRequiredTime);
        document.getElementById('planShift').addEventListener('change', calculateAvailableTime);
        document.getElementById('planStartTime').addEventListener('input', calculatePlannedEndTime);

        // Function to generate Production Order ID
        function generateProductionOrderID() {
            var productionOrderID = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            for (var i = 0; i < 10; i++) {
                productionOrderID += characters.charAt(Math.floor(Math.random() * characters.length));
            }
            document.getElementById('planProductionOrder').value = productionOrderID;
        }

        // Function to create a production order
        function createProductionOrder() {
            var productionOrder = document.getElementById('planProductionOrder').value.trim();
            var productID = document.getElementById('planProductID').value;
            var shop = document.getElementById('planShop').value;
            var workcenter = document.getElementById('planWorkcenter').value;
            var shiftValue = document.getElementById('planShift').value;
            var operatorName = document.getElementById('planOperatorName').value;
            var plannedQty = parseFloat(document.getElementById('planPlannedQty').value) || 0;
            var idealCycleTime = parseFloat(document.getElementById('planIdealCycleTime').value) || 0;
            var totalRequiredTime = parseFloat(document.getElementById('planTotalRequiredTime').value) || 0;
            var availableTime = parseFloat(document.getElementById('planAvailableTime').value) || 0;
            var plannedStartTime = document.getElementById('planStartTime').value;
            var plannedEndTime = document.getElementById('planEndTime').value;

            if (!shiftValue) {
                alert('Please select a shift.');
                return;
            }

            var shift = JSON.parse(shiftValue);

            // Validate inputs
            if (!productionOrder || !productID || !shop || !workcenter || !shift || !operatorName || !plannedQty || !idealCycleTime || !plannedStartTime || !plannedEndTime) {
                alert('All fields are required.');
                return;
            }

            if (availableTime < totalRequiredTime) {
                var feasibleQty = Math.floor(availableTime / idealCycleTime);
                alert('Available time is not sufficient to produce the planned quantity. Feasible production quantity is: ' + feasibleQty);
                return;
            }

            // Create production order object
            var productionOrderObj = {
                workcenter: workcenter,
                productionOrder: productionOrder,
                productID: productID,
                shop: shop,
                shift: shift,
                operatorName: operatorName,
                plannedQty: plannedQty,
                idealCycleTime: idealCycleTime,
                totalRequiredTime: totalRequiredTime,
                availableTime: availableTime,
                plannedStartTime: plannedStartTime,
                plannedEndTime: plannedEndTime,
                plannedDowntimes: plannedDowntimes.slice(),
                status: 'scheduled', // scheduled, assigned, running, hold, completed, delayed
                assigned: false
            };

            // Save to localStorage
            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            savedPlannedProductions.push(productionOrderObj);
            localStorage.setItem('plannedProductions', JSON.stringify(savedPlannedProductions));

            alert('Production Order created successfully!');
            resetPlanningForm();
            updatePlannedProductionsList();
        }

        // Function to reset the planning form
        function resetPlanningForm() {
            document.getElementById('planProductionOrder').value = '';
            document.getElementById('planProductID').value = '';
            document.getElementById('planShop').value = '';
            document.getElementById('planWorkcenter').value = '';
            document.getElementById('planShift').value = '';
            document.getElementById('planOperatorName').value = '';
            document.getElementById('planPlannedQty').value = '';
            document.getElementById('planIdealCycleTime').value = '';
            document.getElementById('planTotalRequiredTime').value = '';
            document.getElementById('planAvailableTime').value = '';
            document.getElementById('planStartTime').value = '';
            document.getElementById('planEndTime').value = '';
            document.getElementById('plannedDowntimeCategory').value = '';
            document.getElementById('plannedDowntimeStart').value = '';
            document.getElementById('plannedDowntimeDuration').value = '';
            plannedDowntimes = [];
            updatePlannedDowntimesList();
        }

        // Function to update the list of planned productions
        function updatePlannedProductionsList() {
            var plannedProductionsUl = document.getElementById('plannedProductionsUl');
            plannedProductionsUl.innerHTML = '';

            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            var filterText = document.getElementById('planningFilter').value.toLowerCase();

            savedPlannedProductions.forEach(function(production, index) {
                // Exclude completed productions
                if (production.status === 'completed') return;

                // Apply filter
                var productionText = JSON.stringify(production).toLowerCase();
                if (productionText.includes(filterText)) {
                    var li = document.createElement('li');
                    var statusIcon = getStatusIcon(production.status);

                    li.innerHTML = '<span class="status-indicator">' + statusIcon + '</span>' +
                        'Workcenter: ' + production.workcenter + ' | PO: ' + production.productionOrder +
                        ' | Product: ' + production.productID + ' | Shift: ' + production.shift.name +
                        ' | Planned Qty: ' + production.plannedQty +
                        ' | Planned Start Time: ' + production.plannedStartTime +
                        ' | Operator: ' + production.operatorName +
                        ' | <button class="list-button" onclick="editPlannedProduction(' + index + ')">Edit</button>' +
                        ' | <button class="list-button" onclick="deletePlannedProduction(' + index + ')">Delete</button>' +
                        ' | <button class="list-button" onclick="assignToProduction(' + index + ')">' +
                        (production.assigned ? 'Assigned' : 'Assign to Production') + '</button>';

                    plannedProductionsUl.appendChild(li);
                }
            });
        }

        // Function to get the status icon based on the status
        function getStatusIcon(status) {
            switch (status) {
                case 'completed':
                    return '<span class="status-icon completed">&#128522;</span>'; // Green Smiley
                case 'running':
                    return '<span class="status-icon running">&#128528;</span>'; // Yellow Neutral Smiley
                case 'hold':
                    return '<span class="status-icon hold">&#128577;</span>'; // Red Sad Smiley
                case 'delayed':
                    return '<span class="status-icon hold">&#128577;</span>'; // Red Sad Smiley
                default:
                    return '•';
            }
        }

        // Function to delete a planned production
        function deletePlannedProduction(index) {
            if (confirm('Are you sure you want to delete this production order?')) {
                var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
                savedPlannedProductions.splice(index, 1);
                localStorage.setItem('plannedProductions', JSON.stringify(savedPlannedProductions));
                updatePlannedProductionsList();
            }
        }

        // Function to edit a planned production
        function editPlannedProduction(index) {
            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            var production = savedPlannedProductions[index];

            // Populate the form with existing data
            document.getElementById('planProductionOrder').value = production.productionOrder;
            document.getElementById('planProductID').value = production.productID;
            document.getElementById('planShop').value = production.shop;
            document.getElementById('planWorkcenter').value = production.workcenter;

            // Since shift is an object, we need to find the matching option
            var shiftOptions = document.getElementById('planShift').options;
            for (var i = 0; i < shiftOptions.length; i++) {
                if (shiftOptions[i].value === JSON.stringify(production.shift)) {
                    document.getElementById('planShift').selectedIndex = i;
                    break;
                }
            }

            document.getElementById('planOperatorName').value = production.operatorName;
            document.getElementById('planPlannedQty').value = production.plannedQty;
            document.getElementById('planIdealCycleTime').value = production.idealCycleTime;
            document.getElementById('planTotalRequiredTime').value = production.totalRequiredTime;
            document.getElementById('planAvailableTime').value = production.availableTime;
            document.getElementById('planStartTime').value = production.plannedStartTime;
            document.getElementById('planEndTime').value = production.plannedEndTime;

            plannedDowntimes = production.plannedDowntimes || [];
            updatePlannedDowntimesList();

            // Remove the production order from the list
            savedPlannedProductions.splice(index, 1);
            localStorage.setItem('plannedProductions', JSON.stringify(savedPlannedProductions));
            updatePlannedProductionsList();
        }

        // Function to assign a production order to production
        function assignToProduction(index) {
            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            var production = savedPlannedProductions[index];
            production.assigned = true;
            production.status = 'assigned';
            localStorage.setItem('plannedProductions', JSON.stringify(savedPlannedProductions));
            updatePlannedProductionsList();
            updateProductionOrdersList();
        }

        // Function to update the list of production orders to start
        function updateProductionOrdersList() {
            var productionOrdersUl = document.getElementById('productionOrdersUl');
            productionOrdersUl.innerHTML = '';

            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            var assignedProductions = savedPlannedProductions.filter(function(prod) {
                return prod.assigned && prod.status === 'assigned';
            });

            assignedProductions.forEach(function(production, index) {
                var li = document.createElement('li');
                li.innerHTML = '<span class="status-indicator">•</span>' +
                    'Workcenter: ' + production.workcenter + ' | PO: ' + production.productionOrder +
                    ' | Product: ' + production.productID + ' | Shift: ' + production.shift.name +
                    ' | Operator: ' + production.operatorName +
                    ' | Planned Start Time: ' + production.plannedStartTime +
                    ' | <button onclick="startProduction(\'' + production.productionOrder + '\')">Start</button>';

                productionOrdersUl.appendChild(li);
            });
        }

        // Continue from where we left off in Part 2...

        // Function to start production
        function startProduction(productionOrderID) {
            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            var productionData = savedPlannedProductions.find(function(prod) {
                return prod.productionOrder === productionOrderID && prod.status === 'assigned';
            });

            if (!productionData) {
                alert('Production Order not found.');
                return;
            }

            // Initialize production data
            var newProduction = {
                ...productionData,
                startTime: new Date(),
                downtimes: [],
                qualityIssues: [],
                totalRunningTime: 0,
                totalDowntime: 0,
                totalQualityTime: 0,
                totalCount: 0,
                goodCount: 0,
                currentStatus: 'running',
                startTimeActual: new Date()
            };

            // Update status to running
            savedPlannedProductions = savedPlannedProductions.map(function(prod) {
                if (prod.productionOrder === productionData.productionOrder) {
                    prod.status = 'running';
                }
                return prod;
            });
            localStorage.setItem('plannedProductions', JSON.stringify(savedPlannedProductions));

            // Add to active productions
            activeProductions.push(newProduction);
            var activeIndex = activeProductions.length - 1;

            // Start timer
            productionTimers[activeIndex] = setInterval(function() {
                updateRunningTime(activeIndex);
            }, 1000);

            // Update UI
            updateProductionOrdersList();
            updateActiveProductionsList();
            updatePlanningActiveProductionsList();
            alert('Production started for Workcenter: ' + newProduction.workcenter);
        }

        // Function to update the list of active productions
        function updateActiveProductionsList() {
            var activeProductionsUl = document.getElementById('activeProductionsUl');
            activeProductionsUl.innerHTML = '';
            activeProductions.forEach(function(production, index) {
                var li = document.createElement('li');
                var statusIcon = getStatusIcon(production.currentStatus);

                li.innerHTML = '<span class="status-indicator">' + statusIcon + '</span>' +
                    'Workcenter: ' + production.workcenter + ' | PO: ' + production.productionOrder +
                    ' | Product: ' + production.productID + ' | Shift: ' + production.shift.name +
                    ' | Operator: ' + production.operatorName +
                    ' | <button onclick="selectProduction(' + index + ')">View</button>';

                activeProductionsUl.appendChild(li);
            });
        }

        // Function to update the list of finished productions
        function updateFinishedProductionsList() {
            var finishedProductionsUl = document.getElementById('finishedProductionsUl');
            finishedProductionsUl.innerHTML = '';
            var filterText = document.getElementById('finishedProductionsFilter').value.toLowerCase();

            var savedFinishedProductions = JSON.parse(localStorage.getItem('finishedProductions')) || [];
            var filteredProductions = savedFinishedProductions.filter(function(production) {
                var productionText = JSON.stringify(production).toLowerCase();
                return productionText.includes(filterText);
            });

            // Show only last 10 finished productions
            filteredProductions.slice(-10).reverse().forEach(function(production) {
                var li = document.createElement('li');
                li.innerHTML = '<span class="status-indicator">&#128522;</span>' +
                    'Workcenter: ' + production.workcenter + ' | PO: ' + production.productionOrder +
                    ' | Product: ' + production.productID + ' | Shift: ' + production.shift.name +
                    ' | Operator: ' + production.operatorName +
                    ' | Finished Time: ' + production.finishTime;
                finishedProductionsUl.appendChild(li);
            });
        }

        // Function to select a production and display its details
        function selectProduction(index) {
            currentProductionIndex = index;
            var production = activeProductions[index];

            // Update UI
            document.getElementById('activeWorkcenter').textContent = production.workcenter;
            document.getElementById('activeProductionOrder').textContent = production.productionOrder;
            document.getElementById('activeProductID').textContent = production.productID;
            document.getElementById('activeOperatorName').textContent = production.operatorName;
            document.getElementById('activeShift').textContent = production.shift.name;
            document.getElementById('activePlannedStartTime').textContent = production.plannedStartTime;
            document.getElementById('activePlannedEndTime').textContent = production.plannedEndTime;

            // Hide production orders and active productions list
            document.getElementById('production-orders-to-start').style.display = 'none';
            document.getElementById('active-productions-list').style.display = 'none';
            document.getElementById('finished-productions-list').style.display = 'none';

            document.getElementById('active-production-section').style.display = 'block';

            updateStatusButton();
            updateDowntimeLog();
            updateQualityLog();
            populateDowntimeCategories();
            populateQualityIssueCategories();

            // Update running time immediately
            updateRunningTime(index);
        }

        // Function to return to the production list
        function returnToProductionList() {
            document.getElementById('active-production-section').style.display = 'none';
            document.getElementById('production-orders-to-start').style.display = 'block';
            document.getElementById('active-productions-list').style.display = 'block';
            document.getElementById('finished-productions-list').style.display = 'block';
            currentProductionIndex = null;
        }

        // Function to stop production
        function stopProduction() {
            var index = currentProductionIndex;
            var production = activeProductions[index];

            if (productionTimers[index]) {
                clearInterval(productionTimers[index]);
                var now = new Date();
                var elapsed = Math.floor((now - production.startTimeActual) / 1000);
                production.totalRunningTime += elapsed;
            }

            production.finishTime = new Date().toLocaleString();

            // Save production data
            saveProductionData(production);

            // Update status to completed
            var savedPlannedProductions = JSON.parse(localStorage.getItem('plannedProductions')) || [];
            var plannedIndex = savedPlannedProductions.findIndex(p => p.productionOrder === production.productionOrder);
            if (plannedIndex !== -1) {
                savedPlannedProductions[plannedIndex].status = 'completed';
                localStorage.setItem('plannedProductions', JSON.stringify(savedPlannedProductions));
            }

            // Remove from active productions
            activeProductions.splice(index, 1);
            delete productionTimers[index];
            currentProductionIndex = null;

            // Add to finished productions
            var savedFinishedProductions = JSON.parse(localStorage.getItem('finishedProductions')) || [];
            savedFinishedProductions.push(production);
            localStorage.setItem('finishedProductions', JSON.stringify(savedFinishedProductions));

            // Update UI
            document.getElementById('active-production-section').style.display = 'none';
            document.getElementById('downtimeLogSection').style.display = 'none';
            document.getElementById('qualityLogSection').style.display = 'none';
            document.getElementById('runningTime').textContent = '00:00:00';

            // Show the production orders and active productions list again
            document.getElementById('production-orders-to-start').style.display = 'block';
            document.getElementById('active-productions-list').style.display = 'block';
            document.getElementById('finished-productions-list').style.display = 'block';

            updateActiveProductionsList();
            updatePlanningActiveProductionsList();
            updatePlannedProductionsList();
            updateFinishedProductionsList();
        }

        // Function to update running time
        function updateRunningTime(index) {
            var production = activeProductions[index];
            var now = new Date();

            // Check for shift breaks
            if (isInBreakTime(production.shift)) {
                if (production.currentStatus !== 'hold') {
                    production.currentStatus = 'hold';
                    updateStatusButton();
                }
            } else {
                if (production.currentStatus === 'hold') {
                    production.currentStatus = 'running';
                    updateStatusButton();
                    production.startTimeActual = new Date();
                }
            }

            var elapsed = Math.floor((now - production.startTimeActual) / 1000);
            var totalElapsed = production.totalRunningTime + elapsed;
            if (currentProductionIndex === index) {
                document.getElementById('runningTime').textContent = formatTime(totalElapsed);
            }

            // Check for delay
            var plannedEndTime = new Date(production.plannedEndTime);
            if (now > plannedEndTime && production.currentStatus !== 'delayed') {
                production.currentStatus = 'delayed';
                updateStatusButton();
            }
        }

        // Function to check if current time is in break time
        function isInBreakTime(shift) {
            var now = new Date();
            var currentTime = now.getHours() * 60 + now.getMinutes(); // in minutes

            var breakTimes = [
                { start: shift.lunchStartTime, end: shift.lunchEndTime },
                { start: shift.tpmStartTime, end: shift.tpmEndTime },
                { start: shift.teaStartTime, end: shift.teaEndTime }
            ];

            for (var i = 0; i < breakTimes.length; i++) {
                if (breakTimes[i].start && breakTimes[i].end) {
                    var start = parseTime(breakTimes[i].start).getHours() * 60 + parseTime(breakTimes[i].start).getMinutes();
                    var end = parseTime(breakTimes[i].end).getHours() * 60 + parseTime(breakTimes[i].end).getMinutes();
                    if (currentTime >= start && currentTime <= end) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Function to format time in HH:MM:SS
        function formatTime(seconds) {
            var hrs = Math.floor(seconds / 3600);
            var mins = Math.floor((seconds % 3600) / 60);
            var secs = seconds % 60;
            return (hrs < 10 ? '0' + hrs : hrs) + ':' +
                (mins < 10 ? '0' + mins : mins) + ':' +
                (secs < 10 ? '0' + secs : secs);
        }

        // Function to update the status button
        function updateStatusButton() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            var statusButton = document.getElementById('statusButton');
            if (production.currentStatus === 'running') {
                statusButton.className = 'status-button status-running';
                statusButton.textContent = 'Production Running';
            } else if (production.currentStatus === 'downtime' || production.currentStatus === 'quality' || production.currentStatus === 'hold') {
                statusButton.className = 'status-button status-hold';
                statusButton.textContent = 'Production On Hold';
            } else if (production.currentStatus === 'delayed') {
                statusButton.className = 'status-button status-hold';
                statusButton.textContent = 'Production Delayed';
            } else if (production.currentStatus === 'completed') {
                statusButton.className = 'status-button status-completed';
                statusButton.textContent = 'Production Completed';
            }
        }

        // Function to save production data
        function saveProductionData(production) {
            var oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];

            // Calculate OEE components
            var plannedProductionTime = production.totalRunningTime + production.totalDowntime + production.totalQualityTime;
            var operatingTime = production.totalRunningTime;
            var availability = operatingTime / plannedProductionTime || 0;
            var performance = 1; // Assuming ideal performance; modify as needed
            var quality = operatingTime / (operatingTime + production.totalQualityTime) || 0;
            var oee = availability * performance * quality;

            // Create data object
            var dataEntry = {
                date: new Date().toLocaleString(),
                workcenter: production.workcenter,
                productionOrder: production.productionOrder,
                productID: production.productID,
                shop: production.shop,
                shift: production.shift.name,
                operatorName: production.operatorName,
                availability: (availability * 100).toFixed(2),
                performance: (performance * 100).toFixed(2),
                quality: (quality * 100).toFixed(2),
                oee: (oee * 100).toFixed(2),
                downtimes: production.downtimes,
                qualityIssues: production.qualityIssues,
                totalRunningTime: operatingTime,
                totalDowntime: production.totalDowntime,
                totalQualityTime: production.totalQualityTime
            };

            // Add new entry
            oeeData.push(dataEntry);

            localStorage.setItem('oeeData', JSON.stringify(oeeData));
        }

        // Function to start downtime
        function startDowntime() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            production.currentStatus = 'downtime';
            production.downtimeStartTime = new Date();
            updateStatusButton();

            // Show downtime section
            document.getElementById('downtime-section').style.display = 'block';
        }

        // Function to end downtime
        function endDowntime() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            var now = new Date();
            var elapsed = Math.floor((now - production.downtimeStartTime) / 1000);
            production.totalDowntime += elapsed;

            var downtimeCategory = document.getElementById('downtimeCategorySelect').value;
            var downtimeCode = document.getElementById('downtimeCodeSelect').value;

            production.downtimes.push({
                startTime: production.downtimeStartTime.toLocaleString(),
                endTime: now.toLocaleString(),
                duration: formatTime(elapsed),
                category: downtimeCategory,
                code: downtimeCode
            });

            production.currentStatus = 'running';
            production.startTimeActual = new Date();
            updateStatusButton();

            // Hide downtime section
            document.getElementById('downtime-section').style.display = 'none';

            // Update logs
            updateDowntimeLog();
        }

        // Function to cancel downtime
        function cancelDowntime() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            production.currentStatus = 'running';
            updateStatusButton();

            // Hide downtime section
            document.getElementById('downtime-section').style.display = 'none';
        }

        // Function to populate downtime categories and codes
        function populateDowntimeCategories() {
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
            var categories = masterData['downtimeCategories'] || [];
            var codes = masterData['downtimeCodes'] || [];

            var categorySelect = document.getElementById('downtimeCategorySelect');
            var codeSelect = document.getElementById('downtimeCodeSelect');

            categorySelect.innerHTML = '<option value="">Select</option>';
            categories.forEach(function(category) {
                var option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            codeSelect.innerHTML = '<option value="">Select</option>';
            codes.forEach(function(code) {
                var option = document.createElement('option');
                option.value = code;
                option.textContent = code;
                codeSelect.appendChild(option);
            });
        }

        // Function to update downtime log
        function updateDowntimeLog() {
            var index = currentProductionIndex;
            var production = activeProductions[index];

            var downtimeLogSection = document.getElementById('downtimeLogSection');
            downtimeLogSection.style.display = 'block';

            var tbody = document.querySelector('#downtimeLogTable tbody');
            tbody.innerHTML = '';

            production.downtimes.forEach(function(downtime) {
                var tr = document.createElement('tr');
                tr.innerHTML = '<td>' + downtime.startTime + '</td>' +
                    '<td>' + downtime.endTime + '</td>' +
                    '<td>' + downtime.duration + '</td>' +
                    '<td>' + downtime.category + '</td>' +
                    '<td>' + downtime.code + '</td>';
                tbody.appendChild(tr);
            });
        }

        // Function to record quality issue
        function recordQualityIssue() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            production.currentStatus = 'quality';
            production.qualityStartTime = new Date();
            updateStatusButton();

            // Show quality issue section
            document.getElementById('quality-section').style.display = 'block';
        }

        // Function to resolve quality issue
        function resolveQualityIssue() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            var now = new Date();
            var elapsed = Math.floor((now - production.qualityStartTime) / 1000);
            production.totalQualityTime += elapsed;

            var qualityCategory = document.getElementById('qualityIssueCategorySelect').value;
            var qualityDescription = document.getElementById('qualityIssueDescription').value;

            production.qualityIssues.push({
                startTime: production.qualityStartTime.toLocaleString(),
                endTime: now.toLocaleString(),
                duration: formatTime(elapsed),
                category: qualityCategory,
                description: qualityDescription
            });

            production.currentStatus = 'running';
            production.startTimeActual = new Date();
            updateStatusButton();

            // Hide quality issue section
            document.getElementById('quality-section').style.display = 'none';

            // Update logs
            updateQualityLog();
        }

        // Function to cancel quality issue
        function cancelQualityIssue() {
            var index = currentProductionIndex;
            var production = activeProductions[index];
            production.currentStatus = 'running';
            updateStatusButton();

            // Hide quality issue section
            document.getElementById('quality-section').style.display = 'none';
        }

        // Function to populate quality issue categories
        function populateQualityIssueCategories() {
            var masterData = JSON.parse(localStorage.getItem('masterData')) || {};
            var categories = masterData['qualityIssueCategories'] || [];

            var categorySelect = document.getElementById('qualityIssueCategorySelect');
            categorySelect.innerHTML = '<option value="">Select</option>';
            categories.forEach(function(category) {
                var option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });
        }

        // Function to update quality log
        function updateQualityLog() {
            var index = currentProductionIndex;
            var production = activeProductions[index];

            var qualityLogSection = document.getElementById('qualityLogSection');
            qualityLogSection.style.display = 'block';

            var tbody = document.querySelector('#qualityLogTable tbody');
            tbody.innerHTML = '';

            production.qualityIssues.forEach(function(issue) {
                var tr = document.createElement('tr');
                tr.innerHTML = '<td>' + issue.startTime + '</td>' +
                    '<td>' + issue.endTime + '</td>' +
                    '<td>' + issue.duration + '</td>' +
                    '<td>' + issue.category + '</td>' +
                    '<td>' + issue.description + '</td>';
                tbody.appendChild(tr);
            });
        }

        // Function to update the list of active productions in planning
        function updatePlanningActiveProductionsList() {
            var planningActiveProductionsUl = document.getElementById('planningActiveProductionsUl');
            planningActiveProductionsUl.innerHTML = '';

            activeProductions.forEach(function(production, index) {
                var li = document.createElement('li');
                var statusIcon = getStatusIcon(production.currentStatus);

                li.innerHTML = '<span class="status-indicator">' + statusIcon + '</span>' +
                    'Workcenter: ' + production.workcenter + ' | PO: ' + production.productionOrder +
                    ' | Product: ' + production.productID + ' | Shift: ' + production.shift.name +
                    ' | Operator: ' + production.operatorName;

                planningActiveProductionsUl.appendChild(li);
            });
        }

        // Initialize the application on page load
        document.addEventListener('DOMContentLoaded', function() {
            displayMasterData();
            updateProductionOrdersList();
            updateActiveProductionsList();
            updateFinishedProductionsList();
        });

        // Continue with Data Visualization functions...

        // Function to populate visualization filters
        function populateVisualizationFilters() {
            var oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];
            var variableSelect = document.getElementById('filterVariable');
            var valueSelect = document.getElementById('filterValue');

            valueSelect.innerHTML = '<option value="">All</option>';
        }

        // Function to update filter options
        function updateFilterOptions() {
            var oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];
            var variable = document.getElementById('filterVariable').value;
            var valueSelect = document.getElementById('filterValue');

            var values = new Set();
            oeeData.forEach(function(data) {
                if (variable && data[variable]) {
                    values.add(data[variable]);
                }
            });

            valueSelect.innerHTML = '<option value="">All</option>';
            values.forEach(function(val) {
                var option = document.createElement('option');
                option.value = val;
                option.textContent = val;
                valueSelect.appendChild(option);
            });

            updateVisualization();
        }

        // Function to update visualization
        function updateVisualization() {
            displayOEEChart();
            displayDowntimeEvents();
            displayQualityIssues();
        }

        // Utility function to calculate average
        function average(arr) {
            if (!Array.isArray(arr) || arr.length === 0) return 0;
            const sum = arr.reduce((a, b) => a + b, 0);
            return parseFloat((sum / arr.length).toFixed(2));
        }

        // Function to display OEE chart
        function displayOEEChart() {
            try {
                const oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];
                const filterVariable = document.getElementById('filterVariable').value;
                const filterValue = document.getElementById('filterValue').value.toLowerCase();
                const timeGrouping = document.getElementById('timeGrouping').value;
                const startDateTime = document.getElementById('filterStartDateTime').value;
                const endDateTime = document.getElementById('filterEndDateTime').value;

                // Filter data based on the selected variable and date range
                const filteredData = oeeData.filter(data => {
                    let include = true;

                    if (filterVariable && filterValue) {
                        const dataValue = data[filterVariable] ? data[filterVariable].toString().toLowerCase() : '';
                        include = dataValue.includes(filterValue);
                    }

                    if (include && startDateTime) {
                        const dataDate = new Date(data.date);
                        const startDate = new Date(startDateTime);
                        include = dataDate >= startDate;
                    }

                    if (include && endDateTime) {
                        const dataDate = new Date(data.date);
                        const endDate = new Date(endDateTime);
                        include = dataDate <= endDate;
                    }

                    return include;
                });

                // Group data based on time grouping
                const groupedData = {};

                filteredData.forEach(data => {
                    const date = new Date(data.date);
                    let key;

                    if (timeGrouping === 'day') {
                        key = date.toISOString().split('T')[0]; // YYYY-MM-DD
                    } else if (timeGrouping === 'week') {
                        // Get Monday of the week
                        const monday = new Date(date);
                        const day = monday.getDay();
                        const diff = monday.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
                        monday.setDate(diff);
                        key = monday.toISOString().split('T')[0]; // YYYY-MM-DD
                    } else if (timeGrouping === 'month') {
                        const month = date.getMonth() + 1;
                        key = `${date.getFullYear()}-${month < 10 ? '0' + month : month}`; // YYYY-MM
                    }

                    if (!groupedData[key]) {
                        groupedData[key] = {
                            availability: [],
                            performance: [],
                            quality: [],
                            oee: []
                        };
                    }

                    groupedData[key].availability.push(parseFloat(data.availability) || 0);
                    groupedData[key].performance.push(parseFloat(data.performance) || 0);
                    groupedData[key].quality.push(parseFloat(data.quality) || 0);
                    groupedData[key].oee.push(parseFloat(data.oee) || 0);
                });

                const labels = [];
                const availabilityData = [];
                const performanceData = [];
                const qualityData = [];
                const oeeDataSet = [];

                for (const key in groupedData) {
                    labels.push(key);
                    availabilityData.push(average(groupedData[key].availability));
                    performanceData.push(average(groupedData[key].performance));
                    qualityData.push(average(groupedData[key].quality));
                    oeeDataSet.push(average(groupedData[key].oee));
                }

                // Display chart using Chart.js
                const ctx = document.getElementById('oeeChartCanvas').getContext('2d');
                if (window.oeeChart) {
                    window.oeeChart.destroy();
                }
                window.oeeChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Availability',
                                data: availabilityData,
                                backgroundColor: '#3498db'
                            },
                            {
                                label: 'Performance',
                                data: performanceData,
                                backgroundColor: '#2ecc71'
                            },
                            {
                                label: 'Quality',
                                data: qualityData,
                                backgroundColor: '#e67e22'
                            },
                            {
                                label: 'OEE',
                                data: oeeDataSet,
                                backgroundColor: '#9b59b6'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            title: {
                                display: true,
                                text: 'OEE Metrics'
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false
                            },
                            legend: {
                                position: 'top',
                            }
                        },
                        interaction: {
                            mode: 'nearest',
                            axis: 'x',
                            intersect: false
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                title: {
                                    display: true,
                                    text: 'Percentage (%)'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Time Grouping'
                                }
                            }
                        }
                    }
                });
            // Utility function to sanitize text
            function sanitizeText(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            // Function to display downtime events
            function displayDowntimeEvents() {
                try {
                    const oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];
                    const downtimeStartDateTime = document.getElementById('downtimeStartDateTime').value;
                    const downtimeEndDateTime = document.getElementById('downtimeEndDateTime').value;

                    const downtimeEvents = [];

                    oeeData.forEach(data => {
                        if (Array.isArray(data.downtimes)) {
                            data.downtimes.forEach(downtime => {
                                const eventDate = new Date(downtime.startTime);
                                if (isNaN(eventDate)) return; // Skip invalid dates

                                let include = true;
                                if (downtimeStartDateTime) {
                                    include = eventDate >= new Date(downtimeStartDateTime);
                                }
                                if (include && downtimeEndDateTime) {
                                    include = eventDate <= new Date(downtimeEndDateTime);
                                }
                                if (include) {
                                    downtimeEvents.push({
                                        date: downtime.startTime,
                                        workcenter: data.workcenter || 'N/A',
                                        productionOrder: data.productionOrder || 'N/A',
                                        category: downtime.category || 'N/A',
                                        code: downtime.code || 'N/A',
                                        duration: downtime.duration || 'N/A'
                                    });
                                }
                            });
                        }
                    });

                    // Sort events by date descending
                    downtimeEvents.sort((a, b) => new Date(b.date) - new Date(a.date));

                    // Display in table using DocumentFragment
                    const tbody = document.querySelector('#downtimeEventsTable tbody');
                    tbody.innerHTML = ''; // Clear existing rows
                    const fragment = document.createDocumentFragment();

                    downtimeEvents.forEach(event => {
                        const tr = document.createElement('tr');

                        const dateTd = document.createElement('td');
                        dateTd.textContent = event.date;
                        tr.appendChild(dateTd);

                        const workcenterTd = document.createElement('td');
                        workcenterTd.textContent = event.workcenter;
                        tr.appendChild(workcenterTd);

                        const poTd = document.createElement('td');
                        poTd.textContent = event.productionOrder;
                        tr.appendChild(poTd);

                        const categoryTd = document.createElement('td');
                        categoryTd.textContent = event.category;
                        tr.appendChild(categoryTd);

                        const codeTd = document.createElement('td');
                        codeTd.textContent = event.code;
                        tr.appendChild(codeTd);

                        const durationTd = document.createElement('td');
                        durationTd.textContent = event.duration;
                        tr.appendChild(durationTd);

                        fragment.appendChild(tr);
                    });

                    tbody.appendChild(fragment);
                } catch (error) {
                    console.error('Error displaying downtime events:', error);
                    // Optionally, display a user-friendly error message
                }
            }


        // Function to display quality issues
        function displayQualityIssues() {
            try {
                const oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];
                const qualityStartDateTime = document.getElementById('qualityStartDateTime').value;
                const qualityEndDateTime = document.getElementById('qualityEndDateTime').value;

                const qualityIssues = [];

                oeeData.forEach(data => {
                    if (Array.isArray(data.qualityIssues)) {
                        data.qualityIssues.forEach(issue => {
                            const issueDate = new Date(issue.startTime);
                            if (isNaN(issueDate)) return; // Skip invalid dates

                            let include = true;
                            if (qualityStartDateTime) {
                                include = issueDate >= new Date(qualityStartDateTime);
                            }
                            if (include && qualityEndDateTime) {
                                include = issueDate <= new Date(qualityEndDateTime);
                            }
                            if (include) {
                                qualityIssues.push({
                                    date: issue.startTime,
                                    workcenter: data.workcenter || 'N/A',
                                    productionOrder: data.productionOrder || 'N/A',
                                    category: issue.category || 'N/A',
                                    description: issue.description || 'N/A',
                                    duration: issue.duration || 'N/A'
                                });
                            }
                        });
                    }
                });

                // Sort issues by date descending
                qualityIssues.sort((a, b) => new Date(b.date) - new Date(a.date));

                // Display in table using DocumentFragment
                const tbody = document.querySelector('#qualityIssuesTable tbody');
                tbody.innerHTML = ''; // Clear existing rows
                const fragment = document.createDocumentFragment();

                qualityIssues.forEach(issue => {
                    const tr = document.createElement('tr');

                    const dateTd = document.createElement('td');
                    dateTd.textContent = issue.date;
                    tr.appendChild(dateTd);

                    const workcenterTd = document.createElement('td');
                    workcenterTd.textContent = issue.workcenter;
                    tr.appendChild(workcenterTd);

                    const poTd = document.createElement('td');
                    poTd.textContent = issue.productionOrder;
                    tr.appendChild(poTd);

                    const categoryTd = document.createElement('td');
                    categoryTd.textContent = issue.category;
                    tr.appendChild(categoryTd);

                    const descriptionTd = document.createElement('td');
                    descriptionTd.textContent = issue.description;
                    tr.appendChild(descriptionTd);

                    const durationTd = document.createElement('td');
                    durationTd.textContent = issue.duration;
                    tr.appendChild(durationTd);

                    fragment.appendChild(tr);
                });

                tbody.appendChild(fragment);
            } catch (error) {
                console.error('Error displaying quality issues:', error);
                alert('An error occurred while displaying quality issues. Please check the console for more details.');
            }
        }

        // Function to export OEE Data
        function exportOEEData() {
            try {
                // Retrieve OEE data from localStorage
                const oeeData = JSON.parse(localStorage.getItem('oeeData')) || [];

                // Check if there's data to export
                if (oeeData.length === 0) {
                    alert('No OEE data available to export.');
                    return;
                }

                // Define CSV headers
                const headers = [
                    'Date',
                    'Workcenter',
                    'Production Order',
                    'Product ID',
                    'Shop',
                    'Shift',
                    'Operator Name',
                    'Availability',
                    'Performance',
                    'Quality',
                    'OEE',
                    'Total Running Time',
                    'Total Downtime',
                    'Total Quality Time'
                ];

                /**
                 * Escapes CSV fields by handling special characters.
                 * @param {string|number} value - The data value to escape.
                 * @returns {string} - The escaped CSV field.
                 */
                const escapeCSV = (value) => {
                    if (typeof value === 'string') {
                        // Escape double quotes by replacing " with ""
                        value = value.replace(/"/g, '""');
                        // If value contains comma, newline, or double quotes, enclose it in double quotes
                        if (value.search(/("|,|\n)/g) >= 0) {
                            value = `"${value}"`;
                        }
                    }
                    return value;
                };

                // Construct CSV rows
                const csvRows = [];
                csvRows.push(headers.join(',')); // Add header row

                oeeData.forEach(data => {
                    const row = [
                        escapeCSV(data.date),
                        escapeCSV(data.workcenter),
                        escapeCSV(data.productionOrder),
                        escapeCSV(data.productID),
                        escapeCSV(data.shop),
                        escapeCSV(data.shift),
                        escapeCSV(data.operatorName),
                        escapeCSV(data.availability),
                        escapeCSV(data.performance),
                        escapeCSV(data.quality),
                        escapeCSV(data.oee),
                        escapeCSV(data.totalRunningTime),
                        escapeCSV(data.totalDowntime),
                        escapeCSV(data.totalQualityTime)
                    ].join(',');

                    csvRows.push(row);
                });

                // Join all rows with newline character
                const csvString = csvRows.join('\n');

                // Create a Blob from the CSV string
                const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });

                // Create a link to download the Blob as a file
                const link = document.createElement('a');
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);

                // Generate a dynamic filename with current date
                const timestamp = new Date().toISOString().split('T')[0];
                link.setAttribute('download', `oee_data_${timestamp}.csv`);

                // Append the link to the DOM, click it to initiate download, and remove it
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                alert('OEE data exported successfully!');
            } catch (error) {
                console.error('Error exporting OEE data:', error);
                alert('An error occurred while exporting OEE data. Please check the console for more details.');
            }
        }
    </script>
</body>
</html>
